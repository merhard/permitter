= Permitter

Here are some instructions for setting up Permitter. Try this out and provide feedback in the {issue tracker}[https://github.com/merhard/permitter/issues].


== Setup

Permitter expects your controllers to have a +current_user+ method. Add some authentication for this (such as Devise[https://github.com/plataformatec/devise]).

To install Permitter, add it to your Gemfile and run the `bundle` command.

  gem "permitter", git: "git://github.com/merhard/permitter.git"

Next generate a Permission class, this is where your permissions will be defined.

  rails g permitter:permission

Add authorization by calling authorize_user! in a before_filter in your ApplicationController.

  class ApplicationController < ActionController::Base
    before_filter authorize_user!
  end

This will add an authorization check locking down every controller action. If you try visiting a page, a <tt>Permitter::Unauthorized</tt> exception will be raised since you have not granted the user permission to access it.


== Defining Abilities

You grant access to controller actions through the +Permission+ class which was generated above. The +current_user+ is passed in allowing you to define permissions based on user attributes. For example:

  if user
    allow_all
  else
    allow_action [:sessions, :registrations], [:new, :create]
    allow_action :sessions, :destroy
  end

Here if there is a user he will be able to perform any action on any controller. If someone is not logged in he can only access the new and create actions of the sessions and registrations controllers as well as the destroy action of the sessions controller.

The first argument to +allow_action+ is the controller name being permitted. The second argument is the action they can perform in that controller.

As shown above, pass an array to either of these will grant permission on each item in the array. Controller names and actions can be represented as symbols or strings.

You can check permissions in any controller or view using the <tt>allow_action?</tt> method.

  <% if allow_action? :comments, :create %>
    <%= link_to "New Comment", new_comment_path %>
  <% end %>

Here the link will only show up if the user can create comments.


== Resource Conditions

What if you need to change authorization based on a model's attributes? You can do so by passing a block as the last argument to +allow_action+. For example, if you want to only allow one to edit projects which he owns:

  allow_action :projects, [:edit, :update] do |project|
    project.user == user
  end

You can check permissions on instances using the <tt>allow_action?</tt> method.

  <%= link_to "Edit Project", edit_project_path if allow_action?(:projects, :update, @project) %>

Here it will only show the edit link if the +user_id+ matches.


== Resource Attributes

TODO
